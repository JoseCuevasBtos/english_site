













    
        
    

    
        
    

    

    
        
    












<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"  xml:lang="en"  xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        
            

            
                
            

            
                <link href="https://en.josecuevas.xyz/" rel="self" type="text/html"/>
            
        
            

            

            
                <link href="https://en.josecuevas.xyz/rss.xml" rel="alternate" type="application/rss+xml"/>
            
        

        
            
                
            
                
                    <link href="https://josecuevas.xyz/rss.xml" hreflang="es" rel="alternate" type="application/rss+xml"/>
                
            
        
            
                
            
                
                    <link href="https://fr.josecuevas.xyz/rss.xml" hreflang="fr" rel="alternate" type="application/rss+xml"/>
                
            
        

        
            <copyright>© José Cuevas</copyright>
        

        <description>Recent content</description>

        
            <language>en</language>
        

        
            <lastBuildDate>2024-10-01 00:00:00 +0000 UTC</lastBuildDate>
        

        <link>https://en.josecuevas.xyz/</link>

        

        <title>José Cuevas</title>

        

        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Vim is a great editor and <code>vimtutor</code> is a great way to begin learning how to
use it. Occasionally, however, you&rsquo;ll find needing much more specific tools
that are not often contained in an introductory manual, here are some of my
favorite less known uses of Vim.</p>
<h2 id="motions">Motions</h2>
<p>Maybe you know you can move up/down a paragraph with <code>{</code>/<code>}</code>, but did you know
you can also move up/down a <em>sentence</em> with <code>(</code>/<code>)</code>?
Also you can go to the first line on the screen with <code>H</code> (for <strong>h</strong>igh), to the
last line with <code>L</code> (for <strong>l</strong>ow) and to the <strong>m</strong>iddle with <code>M</code>.</p>
<p>While not technically motions, scrolling can be useful as well: you can put
your current line at the center with <code>zz</code> and put it at the <strong>t</strong>op/<strong>b</strong>ottom
of your screen with <code>zt</code>/<code>zb</code>.</p>
<h3 id="changes">Changes</h3>
<p>A truly wonderful feature of Vim is the hability of organizing the latest unsaved
changes for files with <code>:changes</code>, which should display a list like the following






<div class="paige-code"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plaintext" data-lang="plaintext"><span style="display:flex;"><span>change line  col text
</span></span><span style="display:flex;"><span>    2    85    0 ---&gt; The cow jumped over the moon.
</span></span><span style="display:flex;"><span>    1   109   45 ---&gt; There is some text missing from this line.
</span></span><span style="display:flex;"><span>&gt;</span></span></code></pre></div></div>

You can jump to the Nth previous change with <code>Ng;</code> and to the Nth following
change with <code>Ng,</code> (in this example, <code>2g;</code> goes to &ldquo;The cow&hellip;&rdquo;).</p>
<h3 id="marks">Marks</h3>
<p>Just like buffers and macros, associated to every lowercase character <code>c</code> you
can put a mark with <code>mc</code> and then open it with <code>'{mark}</code>.
Marks even work through multiple files, to do so you must make them uppercase
or numeric and open them with <code>'{Mark}</code> as well.</p>
<p>By default, Vim creates automatically certain marks such as <code>'^</code> for the last
position where text was inserted, <code>'.</code> for the last change made, <code>'[</code>/<code>']</code> for
the first/last character of the last changed or yanked text and <code>'&lt;</code>/<code>'&gt;</code> for
the first/last character of the last visual selection.</p>
<p>This allows the user to jump back and forth inside a file, though it can be
slightly misleading since marks are invisible; however, you may take a look at
your marks with <code>:marks</code>.
You can also delete marks with <code>:delm[ark] {list}</code> (for example, <code>:delm ab1 d-f</code> deletes all marks a, b, 1, d, e and f).</p>
<h3 id="wrapping-lines">Wrapping lines</h3>
<p>If you have long lines in Vim you can cut them with the operator <code>gq</code> to get
them into the 80-character limit (or <code>gw</code> to not move the cursor position).
You can <strong>j</strong>oin multiple lines instead with the operator <code>J</code>.</p>
<p>Long lines will <em>wrap</em> by default, in order to move down/up through wrapped
lines you should use <code>gj</code>/<code>gk</code>.
Moreover, you can go to the beginning/end of a wrap with <code>g0</code>/<code>g$</code>.
You can also go the N percent of a wrap (from left to right) with <code>NgM</code> (for
example, <code>50gM</code> moves to the approximate half of the line, while <code>90gM</code> is near
the end).</p>
<h2 id="unfolding-lines">(Un)folding lines</h2>
<p>Very recently I discovered the wonderfull world of <em>folding</em> in Vim.  You can
select some not-so-important lines with <code>V</code> and now <em>fold</em> them with <code>zf</code> (this
is actually an operator and, as such, you can do things like <code>zfip</code> to fold the
entire paragraph).
This temporarily hides them, but you can always unfold them (or <strong>o</strong>pen them)
with <code>zo</code> and <strong>c</strong>lose them again with <code>zc</code>, you can toggle this with <code>za</code>.
You can fold lines recursively (i.e., making folds inside of folds) and
open/close them recursively with <code>zO</code>/<code>zC</code>.
You can <strong>d</strong>elete a fold under the cursor with <code>zd</code> (or <code>zD</code> for
recursiveness), and undo a fold with <code>zx</code>.</p>
<p>Since folding can made recursive, each fold has a level (or should it be a
<em>depth</em>?). You can increase the level globally with <code>zm</code> (to fold <strong>m</strong>ore) and
decrease it with <code>zr</code> (to <strong>r</strong>educe foldings).
You can close/open all folds with <code>zM</code>/<code>zR</code>.</p>
<p>After making all the necessary folds, you may save them with <code>:mkvie[w]</code> and
reload them with <code>:lo[adview]</code>.
If you don&rsquo;t want to do this every time you close and open a file, you can turn
it automatic with the following code on your <code>.vimrc</code>:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span><span style="color:#66d9ef">autocmd</span> <span style="color:#a6e22e">BufWinLeave</span> *.* <span style="color:#a6e22e">mkview</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">autocmd</span> <span style="color:#a6e22e">BufWinEnter</span> *.* <span style="color:#a6e22e">silent</span> <span style="color:#a6e22e">loadview</span> </span></span></code></pre></div>
Foldings are also quite useful movement-wise.  You can move up/down to the next
fold with <code>zk</code>/<code>zj</code>.  You can also move <em>inside</em> to the beginning/end of a fold
with <code>[z</code>/<code>]z</code>.</p>
<p>Finally, and this is quite the cherry on top, you can automatize foldings.
By default Vim uses the <code>foldmethod=manual</code>, but if you write Python files it
might be better to use <code>:set fdm=indent</code> or if you write C files it might be
better to use <code>:set fdm=syntax</code>.</p>
<p>Natively, Vim doesn&rsquo;t include too many smart options for folding LaTeX files,
but the plugin <a href="https://github.com/lervag/vimtex">vimtex</a> certainly does.  For
instance, to automatically fold both the preface and long multi-line comments
you may add the following to your <code>.vimrc</code>:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">g</span>:<span style="color:#a6e22e">vimtex_fold_types</span> = {
</span></span><span style="display:flex;"><span>   \ <span style="color:#e6db74">&#39;preamble&#39;</span> : {<span style="color:#e6db74">&#39;enabled&#39;</span> : <span style="color:#ae81ff">1</span>},
</span></span><span style="display:flex;"><span>   \ <span style="color:#e6db74">&#39;comments&#39;</span> : {<span style="color:#e6db74">&#39;enabled&#39;</span> : <span style="color:#ae81ff">1</span>}
</span></span><span style="display:flex;"><span>   \}</span></span></code></pre></div>
You can learn more about folding with <code>:help usr_28</code>.</p>
<h2 id="multiple-files-at-once">Multiple files at once</h2>
<p>Most people either use a tiling window manager or a terminal tabbing system,
but Vim offers one by default (and I do believe it&rsquo;s better!).
You know you can open horizontal <em>splits</em> by <code>:split &lt;file&gt;</code> and vertical ones
with <code>:vsplit &lt;file&gt;</code>, but Vim also allows for <em>tabs</em> with <code>:tabnew &lt;file&gt;</code>;
personally I prefer tabs unless I am editing documents back-to-back.
You can also open up multiple files with vim from your terminal by running:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>vim -<span style="color:#f92672">[</span>oOp<span style="color:#f92672">]</span> &lt;file1&gt; &lt;file2&gt; &lt;...&gt;</span></span></code></pre></div>
where the <code>-o</code>/<code>-O</code>/<code>-p</code> flag tells it to open up in splits/vertical
splits/tabs.</p>
<p>You can move between splits with <code>&lt;Ctrl-w&gt;[hjkl]</code>, you can make two splits
(either horizontal or vertical ones) the same size with <code>&lt;C-w&gt;=</code>, and also
change increase the size of the splits with:</p>
<ul>
<li><code>&lt;C-w&gt;+</code>/<code>&lt;C-w&gt;-</code> for horizontal ones (you can use <code>:&lt;NUM&gt;winc [+-]</code> in the
command line).</li>
<li><code>&lt;C-w&gt;&gt;</code>/<code>&lt;C-w&gt;&lt;</code> for vertical ones (you can use <code>:&lt;NUM&gt;winc [&gt;&lt;]</code> in the
command line).
You can also manually set your vsplit to have N lines with <code>zN&lt;Enter&gt;</code>.</li>
</ul>
<p>You can navigate one tab up/down with <code>gt</code>/<code>gT</code>, you can move your current tab
one space before or after with <code>:+tabm</code>/<code>:-tabm</code>, and also put your current tab
in the <em>n</em>-th position with <code>:&lt;n&gt;tabm</code> and finally you can save your current
session with <code>:mks &lt;session&gt;.vim</code>.
You may then re-enter your session with <code>vim -S &lt;session&gt;.vim</code> and then save
the current changes with <code>:mks! &lt;session&gt;.vim</code>; I use the following on my
<code>~/.vimrc</code> to update sessions automatically with <code>ZS</code>:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span><span style="color:#a6e22e">fu</span> <span style="color:#a6e22e">SessionSave</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">exists</span>(<span style="color:#e6db74">&#34;v:this_session&#34;</span>) == <span style="color:#ae81ff">1</span> &amp;&amp; <span style="color:#e6db74">&#34;v:this_session&#34;</span> != <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">exe</span> <span style="color:#e6db74">&#34;mks!&#34;</span> . <span style="color:#a6e22e">v</span>:<span style="color:#a6e22e">this_session</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">endif</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">endf</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">nnoremap</span> <span style="color:#a6e22e">ZS</span> :<span style="color:#a6e22e">call</span> <span style="color:#a6e22e">SessionSave</span>()&lt;<span style="color:#a6e22e">CR</span>&gt;</span></span></code></pre></div>
Also, I believe Vim&rsquo;s syntax for comparing files is absolutely astonishing.
Instead of the usual <code>diff &lt;a&gt; &lt;b&gt;</code> you can use <code>vim -d &lt;a&gt; &lt;b&gt;</code> and navigate
through both files, you can skip onto the next/previous change with <code>]c</code>/<code>[c</code>.</p>
<h3 id="synchronized-files">Synchronized files</h3>
<p>Vim is great for comparing multiple files at once. For instance, if you change a
file <code>a</code> into a file <code>b</code> you can compare them with <code>vimdiff a b</code>. This
automatically synchronizes both windows, folds common lines and highlights
changes between both; you can disable highlighting with <code>:diffoff!</code>.</p>
<p>There are other contexts in which you might want to synchronize different
windows (say for instance, you are translating a text) without necessarily
highlighting changes.
You can do this by doing vertical splits, and using the command <code>:windo set scb</code>
(shorthand for <code>scrollbind</code>) and the command <code>:windo set crb</code> (shorthand for
<code>cursorbind</code>).
You can open both files in this format with:






<div class="paige-code"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>vim -O &lt;file1&gt; &lt;file2&gt; -c <span style="color:#e6db74">&#34;windo set scb&#34;</span> -c <span style="color:#e6db74">&#34;windo set crb&#34;</span></span></span></code></pre></div></div>
</p>
<h2 id="misc">Misc</h2>
<p>If there is an integer number under the cursor (including sign), you can
increase/decrease the number with <code>&lt;C-a&gt;</code>/<code>&lt;C-x&gt;</code>.
Just very recently I found that you can create smart lists with Vim by
block-selecting (i.e., with <code>&lt;C-v&gt;</code>) a block of same numbers and gradually
increase/decrease them with <code>g&lt;C-a&gt;</code>/<code>g&lt;C-x&gt;</code>.
For instance, the list:






<div class="paige-code"><div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span></span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code class="language-plaintext" data-lang="plaintext"><span style="display:flex;"><span>1.
</span></span><span style="display:flex; background-color:#3c3d38"><span>1.
</span></span><span style="display:flex;"><span>1.
</span></span><span style="display:flex;"><span>1.</span></span></code></pre></td></tr></table>
</div>
</div></div>

May become the following (after <code>2G&lt;C-v&gt;jjg&lt;C-a&gt;</code>):






<div class="paige-code"><div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plaintext" data-lang="plaintext"><span style="display:flex;"><span>1.
</span></span><span style="display:flex;"><span>2.
</span></span><span style="display:flex;"><span>3.
</span></span><span style="display:flex;"><span>4.</span></span></code></pre></td></tr></table>
</div>
</div></div>
</p>
<h3 id="some-further-configurations-at-vimrc">Some further configurations at vimrc</h3>
<p>You may know this already, but Vim does allow for configurations specific
towards certain filetypes.<br>
For instance, the following line sets automatic folding for Python only:</p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>





<div class="paige-code"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span><span style="color:#66d9ef">autocmd</span> <span style="color:#a6e22e">FileType</span> <span style="color:#a6e22e">python</span> <span style="color:#66d9ef">set</span> <span style="color:#a6e22e">fdm</span>=<span style="color:#a6e22e">indent</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">autocmd</span> <span style="color:#a6e22e">FileType</span> <span style="color:#a6e22e">c</span>      <span style="color:#66d9ef">set</span> <span style="color:#a6e22e">fdm</span>=<span style="color:#66d9ef">syntax</span></span></span></code></pre></div></div>

Another reason might be that certain color palettes work better in filetypes
than others, or that it can be helpful for creating file-specific methods of
&ldquo;compilation&rdquo;. The following might be an example:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span><span style="color:#66d9ef">autocmd</span> <span style="color:#a6e22e">FileType</span> <span style="color:#a6e22e">tex</span>    <span style="color:#a6e22e">nmap</span> <span style="color:#a6e22e">ZR</span> :<span style="color:#a6e22e">silent</span>!&lt;<span style="color:#a6e22e">space</span>&gt;<span style="color:#a6e22e">latexmk</span>&lt;<span style="color:#a6e22e">space</span>&gt;-<span style="color:#a6e22e">pdf</span>&lt;<span style="color:#a6e22e">space</span>&gt;<span style="color:#e6db74">&#34;%&#34;</span>&lt;<span style="color:#a6e22e">cr</span>&gt;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">autocmd</span> <span style="color:#a6e22e">FileType</span> <span style="color:#a6e22e">python</span> <span style="color:#a6e22e">nmap</span> <span style="color:#a6e22e">ZR</span> :!&lt;<span style="color:#a6e22e">space</span>&gt;<span style="color:#a6e22e">python</span>&lt;<span style="color:#a6e22e">space</span>&gt;<span style="color:#e6db74">&#34;%&#34;</span>&lt;<span style="color:#a6e22e">cr</span>&gt;</span></span></code></pre></div>
You can check the filetype of a certain file in Vim with <code>:set ft?</code>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:en.josecuevas.xyz,2024-10-01:/blog/vim/</guid>

                
                    <link>https://en.josecuevas.xyz/blog/vim/</link>
                

                
                    <pubDate>Tue, 01 Oct 2024 00:00:00 UTC</pubDate>
                

                
                    <title>Some Vim protips</title>
                
            </item>
        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>The purpose of this note is to review the material exposed on the <a href="https://josecuevas.xyz/teach/seminario-abc/">Seminar on
the $abc$ conjecture and related
topics</a> with indications on the
published literature.
The original talks are in more detail in Spanish, but the main references are
in English.</p>
<p><strong>Acknowledgements to the speakers:</strong>
The talks were given by Matías Alvarado, Francisco Gallardo,
Ignacio Henríquez, Héctor Pastén and Rocío Sepúlveda Manzo.</p>
<h2 id="introduction">Introduction</h2>
<h3 id="history">History</h3>
<p>The $abc$ conjecture was originally formulated independently by David Masser
and Joseph Oesterlé in 1985; the statement is as follows:</p>
<blockquote>
<p><strong>(Strong) $abc$ conjecture:</strong>
Fix $\kappa &gt; 1$. For all $a, b, c$ coprime integers with $a + b = c$ we have
the bound
$$ \max\{ |a|, |b|, |c| \} \ll_\kappa \operatorname{Rad}(abc)^\kappa. $$</p>
</blockquote>
<p>Here $\operatorname{Rad}(n)$ denotes the product of the primes $p \mid n$ with
multiplicity one; it fits the definition of radical of an ideal in commutative
algebra.
Many applications actually don&rsquo;t need the conjecture in this level of
generality; if the statement was proven true for a fixed exponent $\kappa$ we
would say that the <strong>weak $abc$ conjecture</strong> holds for exponent $\kappa$.</p>
<p>The conjecture was inspired by an analogous result of Stothers-Mason (1981) for
function fields, and it also was inspired by Szpiro&rsquo;s conjecture for elliptic
curves (<a href="#szpiros-conjecture-and-abc">see below</a>).
The $abc$ conjecture is very famous because, if true, it immediately solves
many difficult Diophantine problems with ease: some examples are Fermat&rsquo;s last
theorem and Catalan&rsquo;s conjecture (asymptotically), Pillai&rsquo;s conjecture,
Erdös-Woods conjecture, among others.</p>
<p>Alongside the theorem of Stothers and Mason, there are many more unsolved
questions in characteristic zero that are known to hold in the function field
case, such as the analogue of Cartan&rsquo;s second main theorem (for value
distribution).</p>
<h3 id="possible-strategies">Possible strategies</h3>
<p>In the course of this seminar we reviewed some possible formulations of the
$abc$ conjecture. The list isn&rsquo;t comprehensive:</p>
<ol>
<li>For elliptic curves, the minimal discriminant behaves like $c$ in the
equation $a + b = c$, while the conductor behaves like the radical (in the
sense that it has all the same prime factors with controlled exponents).
<strong>Szpiro&rsquo;s conjecture</strong> is an inequality between these two values, and it&rsquo;s
the most popular reformulation of the $abc$ conjecture.</li>
<li>In Diophantine geometry, Roth&rsquo;s approximation theorem occupies a central
place; a consequence of it (or Schmidt&rsquo;s subspace theorem) is the finiteness
of solutions to $S$-unit equations. Linear forms in logarithms gives an
effective solution to $S$-units in two variables, but an <strong>effective Roth</strong>
is almost as good as $abc$.
This also has connections with Vojta&rsquo;s conjectures in analogy of Cartan&rsquo;s
second main theorem in Nevanlinna theory.</li>
<li>Speaking of effective results, an effective Faltings&rsquo; theorem (or <strong>effective
Mordell</strong>, if the reader prefers so) also implies the $abc$ conjecture. It
can be re-stated in terms of an inequality of Faltings heights.</li>
</ol>
<h2 id="elliptic-curves">Elliptic curves</h2>
<h3 id="definitions-and-invariants">Definitions and invariants</h3>
<p><strong>Definition:</strong>
An <em>elliptic curve</em> $E$ over a field $K$ is a regular curve isomorphic to the
projective closure of a (long) Weierstrass equation:
$$ y^2 + a_1xy + a_3y = x^3 + a_2x^2 + a_4x + a_6,
\qquad a_1,\dots,a_6 \in K. $$
Notice that there is no $a_5$.
The index has the following interpretation: after the change of coordinates
$(x, y) \mapsto (u^2x, u^3y)$, after simplifying by $u^{-6}$ changes $a_i
\mapsto u^{-i}a_i$.
We will refer to this $i$ as the <strong>weight</strong> of the coefficient.</p>
<p><strong>Proposition:</strong>
If $\operatorname{char} K \nmid 6$, then any elliptic curve $E$ over $K$ may be
given in short Weierstrass form:
$$ y^2 = x^3 + d_4x + d_6, \qquad d_4, d_6 \in K. $$
Associated to any equation of this form there is a value called the
<strong>discriminant</strong>, given as
$$ \Delta := -16(4d_4^3 + 27d_6^2), $$
which is, up to scalar, the actual discriminant of the cubic polynomial in $x$,
and thus measures if it has repeated roots or not; therefore, it is easy to see
that a short Weierstrass equation determines an elliptic curve iff $\Delta \ne
0$. The discriminant has weight 12.</p>
<p>Given a short Weierstrass equation, we define the <strong>$j$-invariant</strong> of $E$ as
follows:
$$ j(E) := 1728\cdot \frac{d_4^3}{\Delta}, $$
which has now weight 0, and thus it can be verified that is the same for any
choice of a Weierstrass equation.</p>
<blockquote>
<p><strong>Theorem (Poincaré):</strong>
Given any elliptic curve $E$ over $K$ and a fixed rational point $o \in E(K)$,
the set of rational points admit an algebraic group structure $(E(K), +)$ which
commutes with base change and in which $o$ is the neutral element; that is, the
operation is locally given by equations in $K$ and given a field extension $L /
K$, the inclusion map $E(K) \hookrightarrow E(L)$ is a group homomorphism.</p>
</blockquote>
<p>This gives an elliptic curve structure of an algebraic group.</p>
<p><strong>Definition:</strong>
An <em>abelian variety</em> $A$ over a field $K$ is an algebraic group, which is a
smooth, projective variety over the base field.</p>
<p>Actually, one may prove that any algebraic group which is connected,
generically reduced and proper is an abelian variety.
Abelian varieties are generalizations of elliptic curves which are often
ignored a bit, because they&rsquo;re less explicit; however, they&rsquo;re necessary and a
key tool for Falting&rsquo;s proof of the Mordell conjecture.</p>
<blockquote>
<p><strong>Theorem:</strong>
Let $X$ be a curve over a field $K$, the following are equivalent:</p>
<ol>
<li>$X$ is an elliptic curve.</li>
<li>$X$ has a structure of abelian variety over $K$.</li>
<li>$X$ is geometrically integral, smooth, of genus 1 and has at least one
rational point $o \in X(K)$.</li>
</ol>
</blockquote>
<p>Going back to the $j$-invariant, the following is easily shown:</p>
<p><strong>Proposition:</strong> The $j$-invariant $j \colon \mathscr{A}_1(K) \to K$ is
surjective, where $\mathscr{A}_1(K)$ denotes the set of (isomorphism classes
of) elliptic curves over $K$. Moreover, two elliptic curves $E_1$ and $E_2$
have the same $j$-invariant if there is a field extension $L/K$ such that
$(E_1)_L \cong (E_2)_L$ (that is, they are isomorphic over $L$).
In particular, if $K$ is algebraically closed, then $j$ is bijective.</p>
<h3 id="reduction-modulo-p">Reduction modulo $p$</h3>
<p>Let $K$ be a number field and let $E$ be an elliptic curve over $K$.  Taking a
Weierstrass equation for $E$ with integral coefficients, we may build an
$\mathcal{O}_K$-model $\mathcal{M}$ of $E$ (i.e., an scheme over
$\mathcal{O}_K$ whose generic fibre is $E_K$).
By using resolution of singularities, we may modify $\mathcal{M}$ to obtain a
scheme $\mathcal{E}$ which is regular, projective and of finite type over
$\mathcal{O}_K$ (but not smooth, that is, it may have singular fibres!).  Given
a prime $\mathfrak{p}$ of $\mathcal{O}_K$, we may consider the fibre
$\mathcal{E}_\mathfrak{p}$.
We&rsquo;ll say that $E$ has <strong>good reduction</strong> at $\mathfrak{p}$ if the fibre
$\mathcal{E}_\mathfrak{p}$ is <em>smooth</em>; otherwise we say it has <strong>bad
reduction</strong>.</p>
<p>Notice that, since the generic fibre of $\mathcal{E}$ is smooth and
$\mathcal{E}$ is regular, the points of bad reduction are closed, and thus
finite. Also at each point of bad reduction, the smooth locus of the fibre is
open, thus it only has finitely many non-smooth points.
By removing all of them, we obtain an $\mathcal{O}_K$-model $\mathcal{E}_0$ of
$E_K$ which is smooth and of finite type, known as the <strong>Néron model</strong> of
$E_K$.</p>
<p>Now if $\mathcal{E}_0$ is the Néron model of $E_K$ and $\mathfrak{p}$ is a
point of bad reduction, the fibre will be a disconnected algebraic group, whose
connected component (not being proper) will be either the multiplicative group
$\mathbb{G}_m$ or the additive group $\mathbb{G}_a$; if the former holds, we
say $E_K$ has <strong>multiplicative reduction modulo</strong> $\mathfrak{p}$, or that it
has <strong>additive reduction</strong> if the latter holds.
Let $S \subseteq \operatorname{Spec}\mathcal{O}_K$ be an open subscheme, we say
$E$ has <strong>semi-stable reduction</strong> at $S$ if it has good or multiplicative
reduction at all the closed points of $S$.</p>
<p>In general, resolution of singularities of (absolute) surfaces always works
when the base scheme is <em>excellent</em>.
Also, given a general Dedekind scheme $S$ (which we assume connected) and an
abelian variety $A_K$ over the generic point of $S$, there is a Néron model
$\mathcal{A}_S$ for $A_K$ respect to $S$ which is smooth and of finite type
(it must also satisfy the <em>Néron mapping property</em>).
Instead of the trichotomy: good, multiplicative and additive reduction, in
general, one decomposes the algebraic group given as the fibre of the Néron
model into an abelian, multiplicative and unipotent part.
We say an abelian variety is of <strong>semi-stable reduction</strong> if all the fibres of
its Néron model have unipotent dimension zero.</p>
<p>There is another way, more simple, of obtaining a replacement for the fibre
$(\mathcal{E}_0)_{\mathfrak{p}}$: take a Weierstrass equation for $E_K$ with
coefficients in $\mathcal{O}_{K, \mathfrak{p}}$. Associated to the choice of
the equation, we get a discriminant $\Delta$ which is still in
$\mathcal{O}_{K, \mathfrak{p}}$, and thus it has a non-negative
$\mathfrak{p}$-adic valuation $\nu_{\mathfrak{p}}(\Delta) \ge 0$.
We say that the equation is <strong>minimal</strong> at $\mathfrak{p}$ if the valuation of
the discriminant is minimal, in which case we will denote by
$\nu_{\mathfrak{p}}( \mathfrak{D}_{E/K} )$ its value.
Looking back at the equation, it determines a $\mathcal{O}_{K,
\mathfrak{p}}$-model for $E_K$ named the <strong>minimal Weierstrass model</strong>
$\mathcal{W}$, which is normal and projective.</p>
<p>If the prime is of good reduction, we may prove that the minimal Weierstrass
model agrees with $(\mathcal{E}_0)_{\mathfrak{p}}$; otherwise, they can&rsquo;t
agree since $\mathcal{W}$ is connected and singular; thus, to get a chance we
instead consider the smooth locus $\mathcal{W}_{\rm sm}$ and compare it a
connected component of $(\mathcal{E}_0)_{\mathfrak{p}}$, and <em>voilà!</em> Now
they are isomorphic.
This gets interesting in the following way: by the abstract theory of Néron
models, one may show that the fibre is an algebraic group, thus all of its
connected components are mutually isomorphic, and the component of the identity
is a connected subgroup; since it is commutative, smooth, but not proper, this
just leaves the additive group $\mathbb{G}_a$ or a torus $T$ (which is,
geometrically, the multiplicative group $\mathbb{G}_m$).
By a concrete analysis of $\mathcal{W}$ one may show that the only possible
singularities lie at the intersection with the line $y = 0$, leaving either a
cusp (the additive reduction case) or a node (the multiplicative reduction
case).</p>
<p>Anyways, going back to the number $\nu_{\mathfrak{p}}( \mathfrak{D}_{E/K} )$
obtained, we may repeat the process for all primes of
$\operatorname{Spec}(\mathcal{O}_K)$. Since just finitely many of them are of
back reduction, almost all of $\nu_{\mathfrak{p}}$&rsquo;s are zero, so we define
the <strong>minimal discriminant</strong> of $E_K$ as the integral ideal
$$ \mathfrak{D}_{E/K} := \prod_{\mathfrak{p}} \mathfrak{p}^{
\nu_{\mathfrak{p}}( \mathfrak{D}_{E/K} ) }. $$
This sort-of captures all of the bad reduction in simultaneous.
This invariant can be, virtually, whatever ideal it can. For $\Z$ we may
associate a single number, but in general, $\mathcal{O}_K$ won&rsquo;t be a P.I.D.,
and thus $\mathfrak{D}_{E/K}$ is just an ideal.
However, if $\mathfrak{D}_{E/K}$ is principal, then we can actually find a
single Weierstrass equation which is minimal at all primes of $\mathcal{O}_K$;
this is known as <strong>minimal equation</strong>. (N.B.: As a matter of fact, the last
statement is an &ldquo;if and only if&rdquo; by a theorem of Silverman.)</p>
<p>This is all theoretically interesting, but in practice one needs a method for
calculating all of these invariants (reduction modulo $p$ and minimal
discriminant at $p$). Such method comes as <strong>Tate&rsquo;s algorithm</strong>, which is of
vital importance in a lot of results.</p>
<h3 id="szpiros-conjecture-and-abc">Szpiro&rsquo;s conjecture and $abc$</h3>
<p>Another invariant which will be of help is the <strong>exponent of the conductor</strong>
$f(E_K, \mathfrak{p})$ which is $0$ (resp. $1$, $2$) if $\mathfrak{p}$ is of
good (resp.  multiplicative, additive) reduction; with this we construct the
<strong>conductor</strong> which is also an integral ideal that &ldquo;measures bad reduction&rdquo;
$$ \mathfrak{N}_{E/K} := \prod_{\mathfrak{p}} \mathfrak{p}^{
f(E_K, \mathfrak{p}) }. $$
This is actually the <em>tame part of the exponent of the conductor</em> which agrees
with the actual exponent for $\mathfrak{p} \nmid 6$; the full definition
involves a <em>wild part</em>, which is somewhat controlled.
As a consequence of Ogg&rsquo;s formula we have $\mathfrak{N}_{E/K} \mid
\mathfrak{D}_{E/K}$.
In 1983, Lucien Szpiro made the following conjecture:</p>
<blockquote>
<p><strong>Szpiro&rsquo;s conjecture for number fields:</strong>
For all $\epsilon &gt; 0$ and for all elliptic curves $E_K$ over a fixed number
field $K$, the following inequality holds:
$$ \mathbf{N}\mathfrak{D} \ll_\epsilon \mathbf{N}(\mathfrak{N}_{E/K})^{6 +
\epsilon}. $$</p>
</blockquote>
<p>However, by definition, $\mathfrak{N}_{E/K}$ can be, at worst, the radical of
$\mathfrak{D}_{E/K}$ squared; thus any comparison between them two has a real
$abc$-like flavor.
As a matter of fact:</p>
<p><strong>Proposition:</strong> The following holds:</p>
<ol>
<li>Szpiro&rsquo;s conjecture for $\mathbb{Q}$ implies the (weak) $abc$ conjecture for
exponents $3/2 + \epsilon$.</li>
<li>The (strong) $abc$ conjecture implies Szpiro&rsquo;s conjecture for $\mathbb{Q}$.</li>
</ol>
<p>If one looks for full equivalence one has to improve slightly Szpiro&rsquo;s
conjecture:</p>
<blockquote>
<p><strong>Theorem:</strong> The following statements are equivalent:</p>
<ol>
<li>Masser-Oesterlé&rsquo;s $abc$ conjecture.</li>
<li>The <strong>generalized Szpiro&rsquo;s conjecture:</strong> for all $\epsilon &gt; 0$, let
$E_\mathbb{Q}$ be an elliptic curve over $\mathbb{Q}$ given with a minimal
Weierstrass equation, then the following inequality holds:
$$ \max\{ |\Delta|, |d_4|^3 \} \ll_\epsilon N_{E, K}^{6+\epsilon}. $$</li>
</ol>
</blockquote>
<p>It is worth noticing that there&rsquo;s a big deal in looking for generalizations of
the $abc$ conjecture for number fields, and Szpiro&rsquo;s conjecture is quite
natural in that regards.</p>
<h2 id="linear-forms-in-logarithms">Linear forms in logarithms</h2>
<p>Linear forms in logarithms is a method developed inside the branch of
<em>transcendence theory</em>, dedicated to the study of algebraic/transcendence
numbers.
A known result in this area was the <em>Lindemann-Weierstrass theorem</em> which says
that given distinct algebraic numbers $\alpha_1, \dots, \alpha_n$ the
exponentials $e^{\alpha_1}, \dots, e^{\alpha_n}$ are algebraically independent
(over $\mathbb{Q}$).
A proposed improvement was <strong>Hilbert&rsquo;s seventh problem</strong> which says that
$\alpha^b$ is transcendent whenever $\alpha \notin \{0, 1\}$ is algebraic and
$b$ is irrational; this was proven independently by Gelfond and Schneider in
1934.</p>
<p>A restatement is that if $\log\alpha_1$ and $\log\alpha_2$ are linearly
independent over $\mathbb{Q}$ then they are algebraically independent.  This
formulation may be generalized to $n$ terms, which was proven by Alan Baker in
1966, what Baker actually found was that the linear form $$ \Lambda = \beta_0 +
\beta_1\log\alpha_1 + \cdots + \beta_n\log\alpha_n $$ has a lower bound in
terms of the $\beta_i \in \Z$.</p>
<p>After Baker&rsquo;s works, many people improved Baker&rsquo;s bounds.
In the 2000&rsquo;s, Matveev obtained the best one up to this date; and in 1986 Yu
obtained a similar bound for the $p$-adic absolute value of $\Lambda$ above.
This has many applications for heights bounds in algebraic groups (the most
direct example can be by taking exponentials of $\Lambda$, thus obtaining
approximations in the multiplicative group).
In 2001 Stewart and Yu applied the theory of linear forms in logarithms to
obtain the inconditional $abc$-like bound:
$$ \log c \ll_\varepsilon \operatorname{Rad}(abc)^{\frac{1}{3}+\varepsilon}. $$
If we suppose that $a &lt; c^{1 - \eta}$ for a fixed $\eta &gt; 0$ (at choice), H.
Pastén obtained the recent improvement:
$$ \log c \ll_{\eta, \varepsilon} \operatorname{Rad}(abc)^\varepsilon. $$
And, as stated in the beginning, the $abc$ conjecture has tons of
applications, so approaches to $abc$ also have many corollaries, including:
Tijdeman&rsquo;s theorem (Catalan&rsquo;s equation has at most finitely many solutions),
Siegel&rsquo;s theorem on finiteness of integer points in curves of geometric genus
$\ge 1$, finiteness of solutions of Thue&rsquo;s equations, etc.
Another of the big theorems in transcendence theory are effective bounds for
$S$-unit equations.</p>
<h2 id="faltings-proof-of-the-mordell-conjecture">Faltings&rsquo; proof of the Mordell conjecture</h2>
<h3 id="heights-and-diophantine-geometry">Heights and diophantine geometry</h3>
<p>Classically, given a rational number $x = u/v$ with $u$ and $v$ prime to each
other (or if you prefer, an affine point $x \in \mathbb{A}^1(\mathbb{Q})$) we
may define its <strong>(logarithmic) height</strong> as
$$ h(x) = \max\{ |u|, |v| \}, $$
here $|\,|$ denotes the usual archimedian absolute value.
In general, by using all of the places in a number field, we may extend the
definition and obtain Weil&rsquo;s (logarithmic) height for algebraic points in
$\mathbb{P}^1(\mathbb{Q})$.</p>
<p>Heights are at the heart of diophantine geometry, a discipline which mixes
number theory and algebraic geometry by turning functorial properties of
divisors (or sheafs) into numerical properties of heights.
One key theorem is the following:</p>
<blockquote>
<p><strong>Theorem (Northcott&rsquo;s property):</strong>
Given a real number $B$ and a positive integer $d$, there are finitely many
projective points of height $\le B$ and degree $\le d$.</p>
</blockquote>
<p>This innocent-looking result ended up being key for the Mordell-Weil theorem
that $A(K)$ is a finitely generated abelian group when $K$ is a number field
and $A$ is an abelian variety.</p>
<p>The reader may think that Faltings&rsquo; final purpose is to prove certain finitude
property on abelian varieties, for which we look how to apply Northcott&rsquo;s
property.
This will come for free by taking a Weil height in a <em>coarse moduli space</em>, but
won&rsquo;t give the desired outcome, because it has the effect of counting
abelian varieties that are $\mathbb{C}$-isomorphic.
This is known as the <em>moduli height</em> and, in the case of elliptic curves $E$,
this is equivalent to taking $h(j(E))$, where $j(E)$ denotes the $j$-invariant.
I want to stretch again the fact that this doesn&rsquo;t work because a single
elliptic curve $E$ over $K$ may have infinitely many twists (i.e., a
non-isomorphic $E^\prime$ which becomes isomorphic after extending the base
field).</p>
<p>So, how to obtain finitude then? Shafarevich&rsquo;s conjecture (already known for
elliptic curves) predicts that after fixing an abelian variety $A_K$ over $K$,
it has only finitely many twists of controlled good reduction.
Namely, we need to create a &ldquo;height function&rdquo; which takes into account bad
reduction, and which isn&rsquo;t too far from the moduli height.
Here enters <strong>Faltings height</strong> $h_{\rm Fal}(E)$ which is defined as the
Arakelov-theoretic self-intersection of a Néron differential. The comparison
with the moduli height is, as expected, not of bounded difference, but of
<em>logarithmic</em> difference, as shown by Faltings-Silverman&rsquo;s theorem:
$$ O(1) \le h(j_E) + \frac{1}{[K : \mathbb{Q}]}\log \mathbf{N}\Upsilon_{E/K} -
12h_{\rm Fal}(E_K), $$
here, $\Upsilon_{E/K}$ is a term known as the <em>unstable minimal discriminant</em>;
if $E_K$ is semi-stable, then $\Upsilon_{E/K} = 1$ and thus the corresponding
term vanishes.
Therefore, $\Upsilon_{E/K}$ here does control the amount of bad reduction
allowed; by bounding both the moduli height and the unstable minimal
discriminant, we obtain finitely many elliptic curves of bounded Faltings
height.</p>
<p>Faltings&rsquo; proof now proceeds in a sort-of inverse path to that we have just
described, the preliminaries are the following:
given an abelian variety $A_K$ over a number field $K$, there is a <em>finite</em>
extension where $A_L$ is semi-stable (known as the <strong>semi-stable reduction
theorem</strong>); and after any base change $L/K$, the Faltings height may drop
$h_{\rm Fal}(A_L) \le h_{\rm Fal}(A_K)$, but equality is attained whenever
$A_K$ had semi-stable reduction.
Thus, we define <strong>Faltings&rsquo; geometric height</strong> $h_{\rm geom}(A)$ as the height
of $A_L$ where $L/\mathbb{Q}$ is a number field in which $A_L$ has semi-stable
reduction.
In consequence, $h_{\rm geom}$ is comparable (somehow) to the moduli height (as
in Falting-Silverman&rsquo;s theorem), but $h_{\rm Fal}$ always carries an &ldquo;error
measuring bad reduction&rdquo;.
Then $h_{\rm Fal}$ has the Northcott property, and thus, a single abelian
variety can only have finitely many twists with bad reduction in a fixed set of
finite primes; this is Shafarevich&rsquo;s conjecture.  That the Mordell conjecture
follows from Shafarevich&rsquo;s conjecture was well known prior to Faltings&rsquo; works.</p>
<h3 id="freys-conjecture-on-heights">Frey&rsquo;s conjecture on heights</h3>
<p>Say we are given a fractionary ideal $\mathfrak{a}$ in $\mathcal{O}_K$, then
we may expand it as a product of primes $\mathfrak{p}_1^{e_1} \cdots
\mathfrak{p}_n^{e_n}$, where the exponents are (possibly negative) integers
$e_j \in \Z$. Then we define its <strong>degree</strong> as
$$ \deg\mathfrak{a} = \sum_{j=1}^n e_j \, \textbf{N}\mathfrak{p}_j. $$
In 1989, Frey made the following conjecture:</p>
<blockquote>
<p><strong>Frey&rsquo;s height conjecture ($H$):</strong>
Let $K$ be a number field, then for all elliptic curves $E_K$ over $K$ the
following inequality holds:
$$ h_{\rm Fal}(E_K) \ll \deg(\mathfrak{N}_E). $$</p>
</blockquote>
<p>Now, the definition of the degree makes it comparable to the logarithm of
$\textbf{N} \mathfrak{N}_E$, and the Faltings height is the logarithm of an
integral that captures, in some way, the complexity of the elliptic curve.
Thus the following isn&rsquo;t too surprising:</p>
<p><strong>Proposition:</strong>
Frey&rsquo;s height conjecture implies Szpiro&rsquo;s conjecture.</p>
<h3 id="modularity">Modularity</h3>
<p>We previously discussed the use of the coarse moduli space $\mathscr{A}_g$ of
abelian varieties of dimension $g$, but it&rsquo;s necessary a more precise
description of this object, which may be given by the $j$-invariant.</p>
<p>Over $\mathbb{C}$, all abelian varieties are, as complex manifolds, of the form
$\mathbb{C}^g/\Lambda$, where $\Lambda \le \mathbb{C}^g$ is a lattice (i.e., a
discrete $\Z$-submodule of rank $2g$); so, for $g = 1$, the $j$-invariant
determines a map from lattices in $\mathbb{C}$ to complex numbers.
Every lattice is homothetic to one of the form $\mathbb{Z} + \tau \mathbb{Z}$,
where $\tau$ is in the upper half-plane $\mathfrak{H}$, so it determines a
bijection between $\mathbb{C}$ and points of $\operatorname{SL}_2(\mathbb{Z})
\backslash \mathfrak{H} =: Y(1)$.
By using $\mathfrak{H}^* := \mathfrak{H} \cup \mathbb{P}^1(\mathbb{Q})$
instead, the quotient $\operatorname{SL}_2(\mathbb{Z}) \backslash
\mathfrak{H}^* =: X(1)$ is a compact complex manifold, which can be given as a
projective smooth curve over $\mathbb{Q}$.
If one uses a subgroup $\Gamma$ of $\operatorname{SL}_2(\mathbb{Z})$ instead,
one may define other kinds of <strong>modular curves</strong>, which often are
compactifications of coarse moduli spaces.
Among these, a special fuchsian group is the <strong>special modular subgroup of
level $N$</strong></p>
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<!-- raw HTML omitted -->
<p>$$ \Gamma_0(N) = \left\{ \begin{bmatrix}a &amp; b \\ c &amp; d\end{bmatrix} \in
\operatorname{SL}_2\mathbb{Z} : c \equiv 0 \pmod{N} \right\}, $$
whose modular curve is denoted $X_0(N)$.</p>
<p>An elliptic curve $E_K$ over a number field $K$ is said to be <strong>modular</strong> if
there exists an (algebraic) morphism $\phi\colon X_0(N) \to E$ over
$\mathbb{C}$ which is non-constant; such $\phi$ are called <strong>modular
parametrizations</strong>.
One can prove that if such morphism exist, then it is defined in a number field
(possibly larger than $K$).
By the Shimura-Taniyama conjecture (proven by Taylor, Wiles and others), every
elliptic curve <em>is</em> modular.
In this context, we have the following conjecture:</p>
<blockquote>
<p><strong>Frey&rsquo;s degree conjecture ($D_d$):</strong>
Fix $S \subseteq M_\mathbb{Q}$ a finite set of places with $\infty \in S$.
For all $\epsilon &gt; 0$, and for every elliptic curve $E$ over $\mathbb{Q}$
semi-stable outside $S$, it has a modular parametrization $\phi$ such that
$$ \deg\phi \ll_\epsilon \prod_{\ell\mid N_E} \ell^{d+\epsilon}. $$</p>
</blockquote>
<p>As a corollary, Frey&rsquo;s height conjecture follows.</p>
<h2 id="references">References</h2>
<p>For the basics on elliptic curves, it was used Silverman&rsquo;s book <em>The arithmetic
of elliptic curves</em> [Si]; the equivalent geometric definitions for an elliptic
curve are given in Görtz and Wedhorn&rsquo;s <em>Algebraic Geometry</em> (Vols. I and II).
Néron models are exposed in Artin&rsquo;s article in <em>Arithmetic geometry</em> (ed. by
Cornell and Silverman) [AG], in the self-titled book by Bosch, Lütkehbohmert
and Raynaud; and also on Liu&rsquo;s <em>Algebraic geometry and arithmetic curves</em>, the
latter also compares the three associated models related to an elliptic curve
(proper minimal, Néron and Weierstrass models).<br>
The relationship between Szpiro&rsquo;s conjecture and $abc$ is treated in both [Si]
and Bombieri and Gubler&rsquo;s <em>Heights in diophantine geometry</em> [BoGu].</p>
<p>There are plenty of books on linear forms in logarithms. To name a few we have:
Baker&rsquo;s <em>Transcendental number theory</em>; Evertse and Győry&rsquo;s <em>Unit equations in
diophantine number theory</em>, and Waldschmidt&rsquo;s <em>Diophantine approximation on
linear algebraic groups</em>.</p>
<p>The last section was almost entirely covered by [AG], although the basics on
heights are better exposed in [BoGu].
For modular functions we refer to both Serre&rsquo;s <em>A course of arithmetic</em> and
Diamond and Shurman&rsquo;s <em>A first course in modular forms</em>; modular curves are,
again, exposed in [AG].
Also see the volume <em>Modular Forms and Fermat’s Last Theorem</em> (ed. by Cornell,
Silverman and Stevens).
Frey&rsquo;s conjectures are presented in his original article <em>Links between
solutions of $A-B = C$ and elliptic curves</em> in the volume <em>Number theory</em> (ed.
by Schlickewei and Wirsing).</p>
]]></description>
                

                <guid isPermaLink="false">tag:en.josecuevas.xyz,2024-07-11:/blog/abc_review/</guid>

                
                    <link>https://en.josecuevas.xyz/blog/abc_review/</link>
                

                
                    <pubDate>Thu, 11 Jul 2024 13:06:18 -04</pubDate>
                

                
                    <title>Review of the Seminar on the $abc$ conjecture</title>
                
            </item>
        
    </channel>
</rss>
