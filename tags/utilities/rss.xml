













    
        
    

    
        
    







    

    






<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"  xml:lang="en"  xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        
            

            
                
            

            
                <link href="https://en.josecuevas.xyz/tags/utilities/" rel="self" type="text/html"/>
            
        
            

            

            
                <link href="https://en.josecuevas.xyz/tags/utilities/rss.xml" rel="alternate" type="application/rss+xml"/>
            
        

        

        
            <copyright>© José Cuevas</copyright>
        

        <description>Recent content</description>

        
            <language>en</language>
        

        
            <lastBuildDate>2024-10-01 00:00:00 +0000 UTC</lastBuildDate>
        

        <link>https://en.josecuevas.xyz/tags/utilities/</link>

        

        <title>Utilities · Tags · José Cuevas</title>

        

        
            <item>
                
                
                
                
                
                
                

                

                

                

                

                
                

                

                

                
                    <description><![CDATA[<p>Vim is a great editor and <code>vimtutor</code> is a great way to begin learning how to
use it. Occasionally, however, you&rsquo;ll find needing much more specific tools
that are not often contained in an introductory manual, here are some of my
favorite less known uses of Vim.</p>
<h2 id="motions">Motions</h2>
<p>Maybe you know you can move up/down a paragraph with <code>{</code>/<code>}</code>, but did you know
you can also move up/down a <em>sentence</em> with <code>(</code>/<code>)</code>?
Also you can go to the first line on the screen with <code>H</code> (for <strong>h</strong>igh), to the
last line with <code>L</code> (for <strong>l</strong>ow) and to the <strong>m</strong>iddle with <code>M</code>.</p>
<p>While not technically motions, scrolling can be useful as well: you can put
your current line at the center with <code>zz</code> and put it at the <strong>t</strong>op/<strong>b</strong>ottom
of your screen with <code>zt</code>/<code>zb</code>.</p>
<h3 id="changes">Changes</h3>
<p>A truly wonderful feature of Vim is the hability of organizing the latest unsaved
changes for files with <code>:changes</code>, which should display a list like the following






<div class="paige-code"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plaintext" data-lang="plaintext"><span style="display:flex;"><span>change line  col text
</span></span><span style="display:flex;"><span>    2    85    0 ---&gt; The cow jumped over the moon.
</span></span><span style="display:flex;"><span>    1   109   45 ---&gt; There is some text missing from this line.
</span></span><span style="display:flex;"><span>&gt;</span></span></code></pre></div></div>

You can jump to the Nth previous change with <code>Ng;</code> and to the Nth following
change with <code>Ng,</code> (in this example, <code>2g;</code> goes to &ldquo;The cow&hellip;&rdquo;).</p>
<h3 id="marks">Marks</h3>
<p>Just like buffers and macros, associated to every lowercase character <code>c</code> you
can put a mark with <code>mc</code> and then open it with <code>'{mark}</code>.
Marks even work through multiple files, to do so you must make them uppercase
or numeric and open them with <code>'{Mark}</code> as well.</p>
<p>By default, Vim creates automatically certain marks such as <code>'^</code> for the last
position where text was inserted, <code>'.</code> for the last change made, <code>'[</code>/<code>']</code> for
the first/last character of the last changed or yanked text and <code>'&lt;</code>/<code>'&gt;</code> for
the first/last character of the last visual selection.</p>
<p>This allows the user to jump back and forth inside a file, though it can be
slightly misleading since marks are invisible; however, you may take a look at
your marks with <code>:marks</code>.
You can also delete marks with <code>:delm[ark] {list}</code> (for example, <code>:delm ab1 d-f</code> deletes all marks a, b, 1, d, e and f).</p>
<h3 id="wrapping-lines">Wrapping lines</h3>
<p>If you have long lines in Vim you can cut them with the operator <code>gq</code> to get
them into the 80-character limit (or <code>gw</code> to not move the cursor position).
You can <strong>j</strong>oin multiple lines instead with the operator <code>J</code>.</p>
<p>If, instead of the 80-character limit you&rsquo;d prefer something like a break after
120 characters, you may change it with:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span>:<span style="color:#66d9ef">set</span> <span style="color:#a6e22e">textwidth</span>=<span style="color:#ae81ff">120</span></span></span></code></pre></div>
This will also insert an automatic line break after each 120 characters in a
line you&rsquo;re currently editing.</p>
<p>Long lines will <em>wrap</em> by default, in order to move down/up through wrapped
lines you should use <code>gj</code>/<code>gk</code>.
Moreover, you can go to the beginning/end of a wrap with <code>g0</code>/<code>g$</code>.
You can also go the N percent of a wrap (from left to right) with <code>NgM</code> (for
example, <code>50gM</code> moves to the approximate half of the line, while <code>90gM</code> is near
the end).</p>
<h2 id="unfolding-lines">(Un)folding lines</h2>
<p>Very recently I discovered the wonderfull world of <em>folding</em> in Vim.  You can
select some not-so-important lines with <code>V</code> and now <em>fold</em> them with <code>zf</code> (this
is actually an operator and, as such, you can do things like <code>zfip</code> to fold the
entire paragraph).
This temporarily hides them, but you can always unfold them (or <strong>o</strong>pen them)
with <code>zo</code> and <strong>c</strong>lose them again with <code>zc</code>, you can toggle this with <code>za</code>.
You can fold lines recursively (i.e., making folds inside of folds) and
open/close them recursively with <code>zO</code>/<code>zC</code>.
You can <strong>d</strong>elete a fold under the cursor with <code>zd</code> (or <code>zD</code> for
recursiveness), and undo a fold with <code>zx</code>.</p>
<p>Since folding can made recursive, each fold has a level (or should it be a
<em>depth</em>?). You can increase the level globally with <code>zm</code> (to fold <strong>m</strong>ore) and
decrease it with <code>zr</code> (to <strong>r</strong>educe foldings).
You can close/open all folds with <code>zM</code>/<code>zR</code>.</p>
<p>After making all the necessary folds, you may save them with <code>:mkvie[w]</code> and
reload them with <code>:lo[adview]</code>.
If you don&rsquo;t want to do this every time you close and open a file, you can turn
it automatic with the following code on your <code>.vimrc</code>:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span><span style="color:#66d9ef">autocmd</span> <span style="color:#a6e22e">BufWinLeave</span> *.* <span style="color:#a6e22e">mkview</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">autocmd</span> <span style="color:#a6e22e">BufWinEnter</span> *.* <span style="color:#a6e22e">silent</span> <span style="color:#a6e22e">loadview</span> </span></span></code></pre></div>
Foldings are also quite useful movement-wise.  You can move up/down to the next
fold with <code>zk</code>/<code>zj</code>.  You can also move <em>inside</em> to the beginning/end of a fold
with <code>[z</code>/<code>]z</code>.</p>
<p>Finally, and this is quite the cherry on top, you can automatize foldings.
By default Vim uses the <code>foldmethod=manual</code>, but if you write Python files it
might be better to use <code>:set fdm=indent</code> or if you write C files it might be
better to use <code>:set fdm=syntax</code>.</p>
<p>Natively, Vim doesn&rsquo;t include too many smart options for folding LaTeX files,
but the plugin <a href="https://github.com/lervag/vimtex">vimtex</a> certainly does.  For
instance, to automatically fold both the preface and long multi-line comments
you may add the following to your <code>.vimrc</code>:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">g</span>:<span style="color:#a6e22e">vimtex_fold_types</span> = {
</span></span><span style="display:flex;"><span>   \ <span style="color:#e6db74">&#39;preamble&#39;</span> : {<span style="color:#e6db74">&#39;enabled&#39;</span> : <span style="color:#ae81ff">1</span>},
</span></span><span style="display:flex;"><span>   \ <span style="color:#e6db74">&#39;comments&#39;</span> : {<span style="color:#e6db74">&#39;enabled&#39;</span> : <span style="color:#ae81ff">1</span>}
</span></span><span style="display:flex;"><span>   \}</span></span></code></pre></div>
You can learn more about folding with <code>:help usr_28</code>.</p>
<h2 id="multiple-files-at-once">Multiple files at once</h2>
<p>Most people either use a tiling window manager or a terminal tabbing system,
but Vim offers one by default (and I do believe it&rsquo;s better!).
You know you can open horizontal <em>splits</em> by <code>:split &lt;file&gt;</code> and vertical ones
with <code>:vsplit &lt;file&gt;</code>, but Vim also allows for <em>tabs</em> with <code>:tabnew &lt;file&gt;</code>;
personally I prefer tabs unless I am editing documents back-to-back.
You can also open up multiple files with vim from your terminal by running:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>vim -<span style="color:#f92672">[</span>oOp<span style="color:#f92672">]</span> &lt;file1&gt; &lt;file2&gt; &lt;...&gt;</span></span></code></pre></div>
where the <code>-o</code>/<code>-O</code>/<code>-p</code> flag tells it to open up in splits/vertical
splits/tabs.</p>
<p>You can move between splits with <code>&lt;Ctrl-w&gt;[hjkl]</code>, you can make two splits
(either horizontal or vertical ones) the same size with <code>&lt;C-w&gt;=</code>, and also
change increase the size of the splits with:</p>
<ul>
<li><code>&lt;C-w&gt;+</code>/<code>&lt;C-w&gt;-</code> for horizontal ones (you can use <code>:&lt;NUM&gt;winc [+-]</code> in the
command line).</li>
<li><code>&lt;C-w&gt;&gt;</code>/<code>&lt;C-w&gt;&lt;</code> for vertical ones (you can use <code>:&lt;NUM&gt;winc [&gt;&lt;]</code> in the
command line).
You can also manually set your vsplit to have N lines with <code>zN&lt;Enter&gt;</code>.</li>
</ul>
<p>You can navigate one tab up/down with <code>gt</code>/<code>gT</code>, you can move your current tab
one space before or after with <code>:+tabm</code>/<code>:-tabm</code>, and also put your current tab
in the <em>n</em>-th position with <code>:&lt;n&gt;tabm</code> and finally you can save your current
session with <code>:mks &lt;session&gt;.vim</code>.
You may then re-enter your session with <code>vim -S &lt;session&gt;.vim</code> and then save
the current changes with <code>:mks! &lt;session&gt;.vim</code>; I use the following on my
<code>~/.vimrc</code> to update sessions automatically with <code>ZS</code>:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span><span style="color:#a6e22e">fu</span> <span style="color:#a6e22e">SessionSave</span>()
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">exists</span>(<span style="color:#e6db74">&#34;v:this_session&#34;</span>) == <span style="color:#ae81ff">1</span> &amp;&amp; <span style="color:#e6db74">&#34;v:this_session&#34;</span> != <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#a6e22e">exe</span> <span style="color:#e6db74">&#34;mks!&#34;</span> . <span style="color:#a6e22e">v</span>:<span style="color:#a6e22e">this_session</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">endif</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">endf</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">nnoremap</span> <span style="color:#a6e22e">ZS</span> :<span style="color:#a6e22e">call</span> <span style="color:#a6e22e">SessionSave</span>()&lt;<span style="color:#a6e22e">CR</span>&gt;</span></span></code></pre></div>
Also, I believe Vim&rsquo;s syntax for comparing files is absolutely astonishing.
Instead of the usual <code>diff &lt;a&gt; &lt;b&gt;</code> you can use <code>vim -d &lt;a&gt; &lt;b&gt;</code> and navigate
through both files, you can skip onto the next/previous change with <code>]c</code>/<code>[c</code>.</p>
<h3 id="synchronized-files">Synchronized files</h3>
<p>Vim is great for comparing multiple files at once. For instance, if you change a
file <code>a</code> into a file <code>b</code> you can compare them with <code>vimdiff a b</code>. This
automatically synchronizes both windows, folds common lines and highlights
changes between both; you can disable highlighting with <code>:diffoff!</code>.</p>
<p>There are other contexts in which you might want to synchronize different
windows (say for instance, you are translating a text) without necessarily
highlighting changes.
You can do this by doing vertical splits, and using the command <code>:windo set scb</code>
(shorthand for <code>scrollbind</code>) and the command <code>:windo set crb</code> (shorthand for
<code>cursorbind</code>).
You can open both files in this format with:






<div class="paige-code"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>vim -O &lt;file1&gt; &lt;file2&gt; -c <span style="color:#e6db74">&#34;windo set scb&#34;</span> -c <span style="color:#e6db74">&#34;windo set crb&#34;</span></span></span></code></pre></div></div>
</p>
<h2 id="misc">Misc</h2>
<p>If there is an integer number under the cursor (including sign), you can
increase/decrease the number with <code>&lt;C-a&gt;</code>/<code>&lt;C-x&gt;</code>.
Just very recently I found that you can create smart lists with Vim by
block-selecting (i.e., with <code>&lt;C-v&gt;</code>) a block of same numbers and gradually
increase/decrease them with <code>g&lt;C-a&gt;</code>/<code>g&lt;C-x&gt;</code>.
For instance, the list:






<div class="paige-code"><div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="background-color:#3c3d38"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span></span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;"><code class="language-plaintext" data-lang="plaintext"><span style="display:flex;"><span>1.
</span></span><span style="display:flex; background-color:#3c3d38"><span>1.
</span></span><span style="display:flex;"><span>1.
</span></span><span style="display:flex;"><span>1.</span></span></code></pre></td></tr></table>
</div>
</div></div>

May become the following (after <code>2G&lt;C-v&gt;jjg&lt;C-a&gt;</code>):






<div class="paige-code"><div class="highlight"><div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
<table style="border-spacing:0;padding:0;margin:0;border:0;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
</span><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-plaintext" data-lang="plaintext"><span style="display:flex;"><span>1.
</span></span><span style="display:flex;"><span>2.
</span></span><span style="display:flex;"><span>3.
</span></span><span style="display:flex;"><span>4.</span></span></code></pre></td></tr></table>
</div>
</div></div>
</p>
<h3 id="some-further-configurations-at-vimrc">Some further configurations at vimrc</h3>
<p>You may know this already, but Vim does allow for configurations specific
towards certain filetypes.<br>
For instance, the following line sets automatic folding for Python only:</p>
<p>





<div class="paige-code"><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span><span style="color:#66d9ef">autocmd</span> <span style="color:#a6e22e">FileType</span> <span style="color:#a6e22e">python</span> <span style="color:#66d9ef">set</span> <span style="color:#a6e22e">fdm</span>=<span style="color:#a6e22e">indent</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">autocmd</span> <span style="color:#a6e22e">FileType</span> <span style="color:#a6e22e">c</span>      <span style="color:#66d9ef">set</span> <span style="color:#a6e22e">fdm</span>=<span style="color:#66d9ef">syntax</span></span></span></code></pre></div></div>

Another reason might be that certain color palettes work better in filetypes
than others, or that it can be helpful for creating file-specific methods of
&ldquo;compilation&rdquo;. The following might be an example:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span><span style="color:#66d9ef">autocmd</span> <span style="color:#a6e22e">FileType</span> <span style="color:#a6e22e">tex</span>    <span style="color:#a6e22e">nmap</span> <span style="color:#a6e22e">ZR</span> :<span style="color:#a6e22e">silent</span>!&lt;<span style="color:#a6e22e">space</span>&gt;<span style="color:#a6e22e">latexmk</span>&lt;<span style="color:#a6e22e">space</span>&gt;-<span style="color:#a6e22e">pdf</span>&lt;<span style="color:#a6e22e">space</span>&gt;<span style="color:#e6db74">&#34;%&#34;</span>&lt;<span style="color:#a6e22e">cr</span>&gt;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">autocmd</span> <span style="color:#a6e22e">FileType</span> <span style="color:#a6e22e">python</span> <span style="color:#a6e22e">nmap</span> <span style="color:#a6e22e">ZR</span> :!&lt;<span style="color:#a6e22e">space</span>&gt;<span style="color:#a6e22e">python</span>&lt;<span style="color:#a6e22e">space</span>&gt;<span style="color:#e6db74">&#34;%&#34;</span>&lt;<span style="color:#a6e22e">cr</span>&gt;</span></span></code></pre></div>
You can check the filetype of a certain file in Vim with <code>:set ft?</code>.</p>
]]></description>
                

                <guid isPermaLink="false">tag:en.josecuevas.xyz,2024-10-01:/blog/vim/</guid>

                
                    <link>https://en.josecuevas.xyz/blog/vim/</link>
                

                
                    <pubDate>Tue, 01 Oct 2024 00:00:00 UTC</pubDate>
                

                
                    <title>Some Vim protips</title>
                
            </item>
        
    </channel>
</rss>
